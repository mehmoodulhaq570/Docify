[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "convert",
        "importPath": "docx2pdf",
        "description": "docx2pdf",
        "isExtraImport": true,
        "detail": "docx2pdf",
        "documentation": {}
    },
    {
        "label": "pdfplumber",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfplumber",
        "description": "pdfplumber",
        "detail": "pdfplumber",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "suppress_output",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def suppress_output():\n    \"\"\"Temporarily suppress stdout/stderr to hide unwanted messages.\"\"\"\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout, old_stderr = sys.stdout, sys.stderr\n        sys.stdout, sys.stderr = devnull, devnull\n        try:\n            yield\n        finally:\n            sys.stdout, sys.stderr = old_stdout, old_stderr\n# =========================================",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "show_progress",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def show_progress(task_name, func, *args, **kwargs):\n    \"\"\"Display a single, smooth progress bar.\"\"\"\n    print(f\"\\nüîÑ Starting {task_name} conversion...\\n\")\n    with tqdm(\n        total=100,\n        desc=f\"{task_name}\",\n        ncols=70,\n        bar_format=\"{desc}: [{bar}] {percentage:3.0f}%\",\n        ascii=(\"=\", \" \"),\n        leave=False,",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "get_input_output_paths",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def get_input_output_paths(default_ext, input_prompt, output_prompt):\n    \"\"\"Ask user for input and output file paths.\"\"\"\n    inp = input(input_prompt).strip()\n    if not os.path.exists(inp):\n        print(\"‚ùå Error: Input file not found.\")\n        sys.exit(1)\n    input_dir = os.path.dirname(inp)\n    input_name = os.path.splitext(os.path.basename(inp))[0]\n    out_name = input(output_prompt.format(input_name=input_name)).strip()\n    if not out_name:",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "get_folder_and_files",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def get_folder_and_files(extension):\n    \"\"\"Ask for folder path and get all files matching extension.\"\"\"\n    folder = input(\"üìÅ Enter folder path containing files: \").strip()\n    if not os.path.isdir(folder):\n        print(\"‚ùå Error: Invalid folder path.\")\n        sys.exit(1)\n    files = [f for f in os.listdir(folder) if f.lower().endswith(extension)]\n    if not files:\n        print(f\"‚ö†Ô∏è No {extension} files found in the specified folder.\")\n        sys.exit(0)",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "batch_convert",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def batch_convert(task_name, extension, output_ext, func):\n    folder, files = get_folder_and_files(extension)\n    print(f\"üîÑ Starting batch {task_name} conversion...\\n\")\n    for f in files:\n        inp = os.path.join(folder, f)\n        out = os.path.join(folder, os.path.splitext(f)[0] + output_ext)\n        show_progress(f\"{f[:25]} ‚Üí {output_ext}\", func, inp, out)\n    print(f\"\\n‚úÖ Batch conversion complete! Files saved in: {folder}\\n\")\n# =========================================\n# üöÄ Unified conversion handler",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "handle_conversion",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def handle_conversion(task_name, input_ext, output_ext, func):\n    \"\"\"Ask user for mode: single or batch.\"\"\"\n    print(\"\\nüî¢ Select conversion mode:\")\n    print(\"1Ô∏è‚É£  Single file conversion\")\n    print(\"2Ô∏è‚É£  Batch folder conversion\\n\")\n    choice = input(\"üëâ Enter your choice (1 or 2): \").strip()\n    if choice == \"1\":\n        inp, out = get_input_output_paths(\n            output_ext,\n            input_prompt=f\"üìÑ Enter input {input_ext} file path: \",",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "p2w_convertor.cli",
        "description": "p2w_convertor.cli",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        prog=\"p2w_convertor\",\n        description=\"‚ú® Convert Word ‚Üî PDF and Excel ‚Üî CSV files easily!\"\n    )\n    subparsers = parser.add_subparsers(dest=\"command\", help=\"Choose conversion type\")\n    subparsers.add_parser(\"word2pdf\", help=\"Convert Word (.docx) ‚Üí PDF\")\n    subparsers.add_parser(\"pdf2word\", help=\"Convert PDF ‚Üí Word (.docx)\")\n    subparsers.add_parser(\"xlsx2csv\", help=\"Convert Excel (.xlsx) ‚Üí CSV\")\n    subparsers.add_parser(\"csv2xlsx\", help=\"Convert CSV ‚Üí Excel (.xlsx)\")",
        "detail": "p2w_convertor.cli",
        "documentation": {}
    },
    {
        "label": "word_to_pdf",
        "kind": 2,
        "importPath": "p2w_convertor.converters",
        "description": "p2w_convertor.converters",
        "peekOfCode": "def word_to_pdf(input_file, output_file):\n    convert(input_file, output_file)\ndef pdf_to_word(input_file, output_file):\n    doc = Document()\n    with pdfplumber.open(input_file) as pdf:\n        for page in pdf.pages:\n            text = page.extract_text() or \"\"\n            doc.add_paragraph(text)\n    doc.save(output_file)\ndef xlsx_to_csv(input_file, output_file):",
        "detail": "p2w_convertor.converters",
        "documentation": {}
    },
    {
        "label": "pdf_to_word",
        "kind": 2,
        "importPath": "p2w_convertor.converters",
        "description": "p2w_convertor.converters",
        "peekOfCode": "def pdf_to_word(input_file, output_file):\n    doc = Document()\n    with pdfplumber.open(input_file) as pdf:\n        for page in pdf.pages:\n            text = page.extract_text() or \"\"\n            doc.add_paragraph(text)\n    doc.save(output_file)\ndef xlsx_to_csv(input_file, output_file):\n    df = pd.read_excel(input_file)\n    df.to_csv(output_file, index=False)",
        "detail": "p2w_convertor.converters",
        "documentation": {}
    },
    {
        "label": "xlsx_to_csv",
        "kind": 2,
        "importPath": "p2w_convertor.converters",
        "description": "p2w_convertor.converters",
        "peekOfCode": "def xlsx_to_csv(input_file, output_file):\n    df = pd.read_excel(input_file)\n    df.to_csv(output_file, index=False)\ndef csv_to_xlsx(input_file, output_file):\n    df = pd.read_csv(input_file)\n    df.to_excel(output_file, index=False)",
        "detail": "p2w_convertor.converters",
        "documentation": {}
    },
    {
        "label": "csv_to_xlsx",
        "kind": 2,
        "importPath": "p2w_convertor.converters",
        "description": "p2w_convertor.converters",
        "peekOfCode": "def csv_to_xlsx(input_file, output_file):\n    df = pd.read_csv(input_file)\n    df.to_excel(output_file, index=False)",
        "detail": "p2w_convertor.converters",
        "documentation": {}
    }
]